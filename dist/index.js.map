{
  "version": 3,
  "sources": ["../log/lib/main.js", "../log/lib/index.js", "../log-each/lib/main.js", "../log-each/lib/index.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar console = require( 'console' ); // eslint-disable-line stdlib/no-redeclare\n\n\n// VARIABLES //\n\nvar builtin = console.log;\n\n\n// MAIN //\n\n/**\n* Outputs a message to the debugger console.\n*\n* @param {*} [data] - data to log\n* @param {...*} [args] - additional arguments or substitution values\n* @returns {void}\n*\n* @example\n* log( 'Hello, World!' );\n*\n* @example\n* log( 'Hello, %s!', 'World' );\n*/\nfunction log() {\n\tbuiltin.apply( console, arguments );\n}\n\n\n// EXPORTS //\n\nmodule.exports = log;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Output a message a message to the debugger console.\n*\n* @module @stdlib/console/log\n*\n* @example\n* var log = require( '@stdlib/console/log' );\n*\n* log( 'Hello, World!' );\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isString = require( '@stdlib/assert/is-string' ).isPrimitive;\nvar isCollection = require( '@stdlib/assert/is-collection' );\nvar accessors = require( '@stdlib/array/base/accessors' );\nvar format = require( '@stdlib/string/format' );\nvar logger = require( './../../log' );\n\n\n// MAIN //\n\n/**\n* Inserts array element values into a format string and prints the result.\n*\n* @param {string} str - format string\n* @param {...(Collection|*)} args - collections or values\n* @throws {TypeError} first argument must be a string\n* @throws {RangeError} provided collections must have the same length\n* @returns {void}\n*/\nfunction logEach( str ) {\n\tvar strides;\n\tvar offsets;\n\tvar getters;\n\tvar values;\n\tvar nargs;\n\tvar args;\n\tvar len;\n\tvar v;\n\tvar s;\n\tvar o;\n\tvar i;\n\tvar j;\n\tif ( !isString( str ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a string. Value: `%s`.', str ) );\n\t}\n\tnargs = arguments.length;\n\tgetters = [];\n\tstrides = [];\n\targs = [];\n\tfor ( i = 1; i < nargs; i++ ) {\n\t\tv = arguments[ i ];\n\t\tif ( isCollection( v ) ) {\n\t\t\to = accessors( v );\n\t\t\tgetters.push( o.accessors[ 0 ] );\n\t\t\targs.push( v );\n\t\t\tstrides.push( 1 );\n\t\t\tlen = v.length;\n\t\t\ti += 1;\n\t\t\tbreak;\n\t\t} else {\n\t\t\tv = [ v ];\n\t\t\to = accessors( v );\n\t\t\tgetters.push( o.accessors[ 0 ] );\n\t\t\targs.push( v );\n\t\t\tstrides.push( 0 );\n\t\t}\n\t}\n\tif ( len === void 0 ) {\n\t\tlen = 1;\n\t}\n\tfor ( ; i < nargs; i++ ) {\n\t\tv = arguments[ i ];\n\t\tif ( isCollection( v ) ) {\n\t\t\tif ( v.length !== len ) {\n\t\t\t\tthrow new RangeError( 'invalid argument. Provided collections must have the same length.' );\n\t\t\t}\n\t\t\ts = 1;\n\t\t} else {\n\t\t\tv = [ v ];\n\t\t\ts = 0;\n\t\t}\n\t\to = accessors( v );\n\t\tgetters.push( o.accessors[ 0 ] );\n\t\targs.push( v );\n\t\tstrides.push( s );\n\t}\n\tvalues = [ str ];\n\toffsets = [];\n\tfor ( i = 1; i < nargs; i++ ) {\n\t\tvalues.push( null );\n\t\toffsets.push( 0 );\n\t}\n\tfor ( i = 0; i < len; i++ ) {\n\t\tfor ( j = 0; j < nargs-1; j++ ) {\n\t\t\tvalues[ j+1 ] = getters[ j ]( args[ j ], offsets[ j ] );\n\t\t\toffsets[ j ] += strides[ j ];\n\t\t}\n\t\tlogger( format.apply( null, values ) );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = logEach;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Insert array element values into a format string and print the result.\n*\n* @module @stdlib/console/log-each\n*\n* @example\n* var logEach = require( '@stdlib/console/log-each' );\n*\n* var x = [ 1, 2, 3 ];\n* var y = [ 4, 5, 6 ];\n*\n* logEach( '%d < %d ', x, y );\n* // e.g., => '1 < 4\\n2 < 5\\n3 < 6\\n'\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n/*\n* The following modules are intentionally not exported: tools\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-read-only-property' );\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace ns\n*/\nvar ns = {};\n\n/**\n* @name log\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/console/log}\n*/\nsetReadOnly( ns, 'log', require( './../log' ) );\n\n/**\n* @name logEach\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/console/log-each}\n*/\nsetReadOnly( ns, 'logEach', require( './../log-each' ) );\n\n\n// EXPORTS //\n\nmodule.exports = ns;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAU,QAAS,SAAU,EAK7BC,EAAUD,EAAQ,IAkBtB,SAASE,GAAM,CACdD,EAAQ,MAAOD,EAAS,SAAU,CACnC,CAKAD,EAAO,QAAUG,ICpDjB,IAAAC,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAiCA,IAAIC,EAAO,IAKXD,EAAO,QAAUC,ICtCjB,IAAAC,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAW,QAAS,0BAA2B,EAAE,YACjDC,EAAe,QAAS,8BAA+B,EACvDC,EAAY,QAAS,8BAA+B,EACpDC,EAAS,QAAS,uBAAwB,EAC1CC,EAAS,IAcb,SAASC,EAASC,EAAM,CACvB,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACJ,GAAK,CAAClB,EAAUM,CAAI,EACnB,MAAM,IAAI,UAAWH,EAAQ,kEAAmEG,CAAI,CAAE,EAMvG,IAJAK,EAAQ,UAAU,OAClBF,EAAU,CAAC,EACXF,EAAU,CAAC,EACXK,EAAO,CAAC,EACFK,EAAI,EAAGA,EAAIN,EAAOM,IAEvB,GADAH,EAAI,UAAWG,CAAE,EACZhB,EAAca,CAAE,EAAI,CACxBE,EAAId,EAAWY,CAAE,EACjBL,EAAQ,KAAMO,EAAE,UAAW,CAAE,CAAE,EAC/BJ,EAAK,KAAME,CAAE,EACbP,EAAQ,KAAM,CAAE,EAChBM,EAAMC,EAAE,OACRG,GAAK,EACL,KACD,MACCH,EAAI,CAAEA,CAAE,EACRE,EAAId,EAAWY,CAAE,EACjBL,EAAQ,KAAMO,EAAE,UAAW,CAAE,CAAE,EAC/BJ,EAAK,KAAME,CAAE,EACbP,EAAQ,KAAM,CAAE,EAMlB,IAHKM,IAAQ,SACZA,EAAM,GAECI,EAAIN,EAAOM,IAAM,CAExB,GADAH,EAAI,UAAWG,CAAE,EACZhB,EAAca,CAAE,EAAI,CACxB,GAAKA,EAAE,SAAWD,EACjB,MAAM,IAAI,WAAY,mEAAoE,EAE3FE,EAAI,CACL,MACCD,EAAI,CAAEA,CAAE,EACRC,EAAI,EAELC,EAAId,EAAWY,CAAE,EACjBL,EAAQ,KAAMO,EAAE,UAAW,CAAE,CAAE,EAC/BJ,EAAK,KAAME,CAAE,EACbP,EAAQ,KAAMQ,CAAE,CACjB,CAGA,IAFAL,EAAS,CAAEJ,CAAI,EACfE,EAAU,CAAC,EACLS,EAAI,EAAGA,EAAIN,EAAOM,IACvBP,EAAO,KAAM,IAAK,EAClBF,EAAQ,KAAM,CAAE,EAEjB,IAAMS,EAAI,EAAGA,EAAIJ,EAAKI,IAAM,CAC3B,IAAMC,EAAI,EAAGA,EAAIP,EAAM,EAAGO,IACzBR,EAAQQ,EAAE,CAAE,EAAIT,EAASS,CAAE,EAAGN,EAAMM,CAAE,EAAGV,EAASU,CAAE,CAAE,EACtDV,EAASU,CAAE,GAAKX,EAASW,CAAE,EAE5Bd,EAAQD,EAAO,MAAO,KAAMO,CAAO,CAAE,CACtC,CACD,CAKAX,EAAO,QAAUM,ICnHjB,IAAAc,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAqCA,IAAIC,EAAO,IAKXD,EAAO,QAAUC,ICZjB,IAAIC,EAAc,QAAS,yCAA0C,EAUjEC,EAAK,CAAC,EASVD,EAAaC,EAAI,MAAO,GAAsB,EAS9CD,EAAaC,EAAI,UAAW,GAA2B,EAKvD,OAAO,QAAUA",
  "names": ["require_main", "__commonJSMin", "exports", "module", "console", "builtin", "log", "require_lib", "__commonJSMin", "exports", "module", "main", "require_main", "__commonJSMin", "exports", "module", "isString", "isCollection", "accessors", "format", "logger", "logEach", "str", "strides", "offsets", "getters", "values", "nargs", "args", "len", "v", "s", "o", "i", "j", "require_lib", "__commonJSMin", "exports", "module", "main", "setReadOnly", "ns"]
}
