{"version":3,"file":"index.mjs","sources":["../log/lib/main.js","../log-each/lib/main.js","../log-each-map/lib/main.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar console = require( 'console' ); // eslint-disable-line stdlib/no-redeclare\n\n\n// VARIABLES //\n\nvar builtin = console.log;\n\n\n// MAIN //\n\n/**\n* Outputs a message to the debugger console.\n*\n* @param {*} [data] - data to log\n* @param {...*} [args] - additional arguments or substitution values\n* @returns {void}\n*\n* @example\n* log( 'Hello, World!' );\n*\n* @example\n* log( 'Hello, %s!', 'World' );\n*/\nfunction log() {\n\tbuiltin.apply( console, arguments );\n}\n\n\n// EXPORTS //\n\nexport default log;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isString } from '@stdlib/assert/is-string';\nimport isCollection from '@stdlib/assert/is-collection';\nimport resolveGetter from '@stdlib/array/base/resolve-getter';\nimport format from '@stdlib/string/format';\nimport logger from './../../log';\n\n\n// MAIN //\n\n/**\n* Inserts array element values into a format string and prints the result.\n*\n* @param {string} str - format string\n* @param {...(Collection|*)} [args] - collections or values\n* @throws {TypeError} first argument must be a string\n* @throws {RangeError} provided collections must have the same length\n* @returns {void}\n*/\nfunction logEach( str ) {\n\tvar strides;\n\tvar offsets;\n\tvar getters;\n\tvar values;\n\tvar nargs;\n\tvar args;\n\tvar len;\n\tvar v;\n\tvar s;\n\tvar i;\n\tvar j;\n\tif ( !isString( str ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a string. Value: `%s`.', str ) );\n\t}\n\tnargs = arguments.length;\n\tgetters = [];\n\tstrides = [];\n\targs = [];\n\tfor ( i = 1; i < nargs; i++ ) {\n\t\tv = arguments[ i ];\n\t\tif ( isCollection( v ) ) {\n\t\t\tgetters.push( resolveGetter( v ) );\n\t\t\targs.push( v );\n\t\t\tstrides.push( 1 );\n\t\t\tlen = v.length;\n\t\t\ti += 1;\n\t\t\tbreak;\n\t\t} else {\n\t\t\tv = [ v ];\n\t\t\tgetters.push( resolveGetter( v ) );\n\t\t\targs.push( v );\n\t\t\tstrides.push( 0 );\n\t\t}\n\t}\n\tif ( len === void 0 ) {\n\t\tlen = 1;\n\t}\n\tfor ( ; i < nargs; i++ ) {\n\t\tv = arguments[ i ];\n\t\tif ( isCollection( v ) ) {\n\t\t\tif ( v.length !== len ) {\n\t\t\t\tthrow new RangeError( 'invalid argument. Provided collections must have the same length.' );\n\t\t\t}\n\t\t\ts = 1;\n\t\t} else {\n\t\t\tv = [ v ];\n\t\t\ts = 0;\n\t\t}\n\t\tgetters.push( resolveGetter( v ) );\n\t\targs.push( v );\n\t\tstrides.push( s );\n\t}\n\tvalues = [ str ];\n\toffsets = [];\n\tfor ( i = 1; i < nargs; i++ ) {\n\t\tvalues.push( null );\n\t\toffsets.push( 0 );\n\t}\n\tfor ( i = 0; i < len; i++ ) {\n\t\tfor ( j = 0; j < nargs-1; j++ ) {\n\t\t\tvalues[ j+1 ] = getters[ j ]( args[ j ], offsets[ j ] );\n\t\t\toffsets[ j ] += strides[ j ];\n\t\t}\n\t\tlogger( format.apply( null, values ) );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default logEach;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isString } from '@stdlib/assert/is-string';\nimport isFunction from '@stdlib/assert/is-function';\nimport isCollection from '@stdlib/assert/is-collection';\nimport resolveGetter from '@stdlib/array/base/resolve-getter';\nimport nulls from '@stdlib/array/base/nulls';\nimport zeros from '@stdlib/array/base/zeros';\nimport format from '@stdlib/string/format';\nimport logger from './../../log';\n\n\n// MAIN //\n\n/**\n* Inserts array element values and the result of a callback function into a format string and prints the result.\n*\n* @param {string} str - format string\n* @param {...(Collection|*)} [args] - collections or values\n* @param {Function} clbk - callback function\n* @param {*} [thisArg] - callback execution context\n* @throws {TypeError} first argument must be a string\n* @throws {TypeError} callback argument must be a function\n* @throws {RangeError} provided collections must have the same length\n* @returns {void}\n*\n* @example\n* function add( x, y ) {\n*     return x + y;\n* }\n*\n* var x = [ 1, 2, 3 ];\n* var y = [ 4, 5, 6 ];\n*\n* logEachMap( '%d + %d = %d', x, y, add );\n* // e.g., => '1 + 4 = 5\\n2 + 5 = 7\\n3 + 6 = 9\\n'\n*/\nfunction logEachMap( str ) {\n\tvar strides;\n\tvar offsets;\n\tvar getters;\n\tvar thisArg;\n\tvar cbArgs;\n\tvar values;\n\tvar nargs;\n\tvar args;\n\tvar clbk;\n\tvar len;\n\tvar v;\n\tvar s;\n\tvar i;\n\tvar j;\n\n\tnargs = arguments.length;\n\tif ( !isString( str ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a string. Value: `%s`.', str ) );\n\t}\n\tnargs -= 1;\n\tif ( isFunction( arguments[ nargs ] ) ) {\n\t\tclbk = arguments[ nargs ];\n\t\tnargs -= 1;\n\t} else {\n\t\tclbk = arguments[ nargs-1 ];\n\t\tif ( !isFunction( clbk ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Callback argument must be a function. Value: `%s`.', clbk ) );\n\t\t}\n\t\tthisArg = arguments[ nargs ];\n\t\tnargs -= 2;\n\t}\n\tgetters = [];\n\tstrides = [];\n\targs = [];\n\n\t// Find the first argument which is a collection...\n\tfor ( i = 1; i < nargs+1; i++ ) {\n\t\tv = arguments[ i ];\n\t\tif ( isCollection( v ) ) {\n\t\t\tgetters.push( resolveGetter( v ) );\n\t\t\targs.push( v );\n\t\t\tstrides.push( 1 );\n\t\t\tlen = v.length;\n\t\t\ti += 1;\n\t\t\tbreak;\n\t\t} else {\n\t\t\tv = [ v ];\n\t\t\tgetters.push( resolveGetter( v ) );\n\t\t\targs.push( v );\n\t\t\tstrides.push( 0 );\n\t\t}\n\t}\n\t// If weren't provided a collection argument, all arguments are \"broadcasted\"...\n\tif ( len === void 0 ) {\n\t\tlen = 1;\n\t}\n\t// For the remaining arguments, resolve each argument to a collection...\n\tfor ( ; i < nargs+1; i++ ) {\n\t\tv = arguments[ i ];\n\t\tif ( isCollection( v ) ) {\n\t\t\tif ( v.length !== len ) {\n\t\t\t\tthrow new RangeError( 'invalid argument. Provided collections must have the same length.' );\n\t\t\t}\n\t\t\ts = 1;\n\t\t} else {\n\t\t\tv = [ v ];\n\t\t\ts = 0;\n\t\t}\n\t\tgetters.push( resolveGetter( v ) );\n\t\targs.push( v );\n\t\tstrides.push( s );\n\t}\n\t// Initialize an array containing values for generating an interpolated format string:\n\tvalues = nulls( nargs+2 ); // [ str, v0, v1, ..., vN, result ]\n\tvalues[ 0 ] = str;\n\n\t// Initialize an array containing index offsets, which are \"pointers\" to the current set of array elements when calling the provided callback function:\n\toffsets = zeros( nargs ); // [ o0, o1, ..., oN ]\n\n\t// Initialize an array containing arguments to be provided to the callback function:\n\tcbArgs = nulls( nargs+2 ); // [ v0, v1, ..., vN, index, arrays ]\n\n\t// The last argument provided to the callback function should be the list of input arrays/broadcasted values:\n\tcbArgs[ nargs+1 ] = args;\n\n\t// Print an interpolated format string for each set of broadcasted array values...\n\tfor ( i = 0; i < len; i++ ) {\n\t\t// Resolve the set of broadcasted array values...\n\t\tfor ( j = 0; j < nargs; j++ ) {\n\t\t\tcbArgs[ j ] = getters[ j ]( args[ j ], offsets[ j ] );\n\t\t\tvalues[ j+1 ] = cbArgs[ j ];\n\t\t\toffsets[ j ] += strides[ j ];\n\t\t}\n\t\t// The second-to-last callback argument should be the current array element index:\n\t\tcbArgs[ nargs ] = i;\n\n\t\t// Compute the result of passing the current set of array elements to the provided callback function:\n\t\tvalues[ nargs+1 ] = clbk.apply( thisArg, cbArgs );\n\n\t\t// Print an interpolated string:\n\t\tlogger( format.apply( null, values ) );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default logEachMap;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n/*\n* The following modules are intentionally not exported: tools\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-read-only-property';\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace ns\n*/\nvar ns = {};\n\n/**\n* @name log\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/console/log}\n*/\nimport log from './../log';\nsetReadOnly( ns, 'log', log );\n\n/**\n* @name logEach\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/console/log-each}\n*/\nimport logEach from './../log-each';\nsetReadOnly( ns, 'logEach', logEach );\n\n/**\n* @name logEachMap\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/console/log-each-map}\n*/\nimport logEachMap from './../log-each-map';\nsetReadOnly( ns, 'logEachMap', logEachMap );\n\n\n// EXPORTS //\n\nexport default ns;\n"],"names":["console","builtin","log","apply","arguments","logEach","str","strides","offsets","getters","values","nargs","args","len","v","s","i","j","isString","TypeError","format","length","isCollection","push","resolveGetter","RangeError","logger","logEachMap","thisArg","cbArgs","clbk","isFunction","nulls","zeros","ns","setReadOnly"],"mappings":"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"}